/// C221060

/*

1. Write a program to find the least square line y = a + bx for the following data
        x     -2    -1     0     1     2
        y      1     2     3     4     5


*/

#include<bits/stdc++.h>
using namespace std;


int main()
{

    int n,i = 0;
    cout << "n = ";
    cin >> n;
    vector<double>x(n),y(n);
    double sx = 0, sy= 0, sxx = 0,sxy=0;
    cout << "Enter " << n << " entries of x:\n";
    for(auto &a : x)
    {
        cin >> a;
        sx += a;
        sxx += (a*a);
    }
    cout << "Enter " << n << " entries of y:\n";
    for(auto &a : y)
    {
        cin >> a;
        sy += a;
        sxy += (x[i++] * a);
    }

    double a = (1.00 * sy * sxx) - (1.00 * sx * sxy);
    a /= (1.00 * n * sxx) - (1.00 * (sx)*(sx));

    double b = (1.00 * n * sxy) - (1.00 * sx * sy);
    b /= (1.00 * n * sxx) - (1.00 * (sx)*(sx));

    cout << endl;
    cout << "The line equation is : y = " << a << ((b >= 0.0) ? " + " : " - ") << abs(b) << "x" << endl;


    return 0;
}

/*

Input:

5
-2 -1 0 1 2
1 2 3 4 5

Output:

The line equation is : y = 3 + 1x

*/





















/// C221060

/*

2. Write a program to find the least square parabola y = a + bx + cx2 for the following data
      x         2       4      6        8                     
      y         1.4     2.0     2.4     2.8


*/


#include<bits/stdc++.h>
using namespace std;

// Function to perform Gaussian elimination
void gaussianElimination(vector<vector<double>> &a, vector<double> &x, int n) {
    for (int i = 0; i < n; i++) {
        // Partial pivoting
        for (int k = i + 1; k < n; k++) {
            if (fabs(a[k][i]) > fabs(a[i][i])) {
                for (int j = 0; j <= n; j++) {
                    swap(a[i][j], a[k][j]);
                }
            }
        }

        // Make diagonal elements 1
        double diag = a[i][i];
        for (int j = 0; j <= n; j++) {
            a[i][j] /= diag;
        }

        // Eliminate below
        for (int k = 0; k < n; k++) {
            if (k != i) {
                double factor = a[k][i];
                for (int j = 0; j <= n; j++) {
                    a[k][j] -= factor * a[i][j];
                }
            }
        }
    }

    // Extract solution
    for (int i = 0; i < n; i++) {
        x[i] = a[i][n];
    }
}

int main() {
    int dataPoints, degree;
    cout << "Enter number of data points: ";
    cin >> dataPoints;
    cout << "Enter degree of polynomial: ";
    cin >> degree;

    vector<double> X(dataPoints), Y(dataPoints);
    cout << "Enter x and y values:\n";
    for (int i = 0; i < dataPoints; i++) {
        cin >> X[i] >> Y[i];
    }

    int m = degree;
    vector<vector<double>> mat(m + 1, vector<double>(m + 2, 0.0));

    // Compute sums
    vector<double> sumX(2 * m + 1, 0.0);
    for (int i = 0; i < 2 * m + 1; i++) {
        for (int j = 0; j < dataPoints; j++) {
            sumX[i] += pow(X[j], i);
        }
    }

    vector<double> sumXY(m + 1, 0.0);
    for (int i = 0; i <= m; i++) {
        for (int j = 0; j < dataPoints; j++) {
            sumXY[i] += pow(X[j], i) * Y[j];
        }
    }

    // Fill normal equations
    for (int i = 0; i <= m; i++) {
        for (int j = 0; j <= m; j++) {
            mat[i][j] = sumX[i + j];
        }
        mat[i][m + 1] = sumXY[i];
    }

    // Solve
    vector<double> coeff(m + 1);
    gaussianElimination(mat, coeff, m + 1);

    cout << "\nPolynomial coefficients:\n";
    for (int i = 0; i <= m; i++) {
        cout << "a" << i << " = " << coeff[i] << "\n";
    }

    cout << "\nEquation: y = ";
    for (int i = 0; i <= m; i++) {
        cout << coeff[i];
        if (i > 0) cout << "*x^" << i;
        if (i < m) cout << " + ";
    }
    cout << endl;

    return 0;
}




/*

Input:

4
2
2 1.4
4 2.0
6 2.4
8 2.8

Output:

Polynomial coefficients:
a0 = 0.75
a1 = 0.355
a2 = -0.0125

Equation: y = 0.75 + 0.355*x^1 + -0.0125*x^2



*/









/// C221060

/*

3. Write a program to find the best possible values of a and b from the relation y = ae^bx for the following data:
     x	2	10	26	61
     y	600	500	400	350

*/
/*

ln(y) = ln(a) + bx
Y = A0 + A1X.
calculate A1 same as 'b' in a line equation.
A0 = avg(Y) - A1 avg(X)
a = exp(A0)
*/

#include <bits/stdc++.h>
using namespace std;


int main()
{
    int n;
    cout << "n: ";
    cin >> n;
    double sx = 0, sy = 0, sxs = 0,sxy = 0;
    vector<double> x(n + 1), y (n + 1);
    cout << "Enter the " << n << " entries of x: ";
    for( int i = 1; i <= n; i++)
    {
        cin >> x[i];
        sx += x[i];
        sxs += (x[i] * x[i]);
    }

    cout << "Enter the " << n << " entries of y: ";
    for( int i = 1; i <= n; i++)
    {
        cin >> y[i];
        y[i] = log(y[i]);
        sy += y[i];
        sxy += x[i] * y[i];
    }
    double A1 = (n * (sxy)) - (sx * sy);
    A1 /= (1.00 * n * sxs) - (1.00 * sx * sx);
    sx /= (1.00 * n);
    sy /= (1.00 * n);
    double A0 = sy - (A1* sx);
    A0 = exp(A0);
    cout << "\n";
    cout << "y = " << A0 << "e^" << A1 << "x\n";
}

/*

Input:

4
2 10 26 61
600 500 400 350

Output:

y = 558.191e^-0.00846335x

*/












/// C221060

/*

4. Write a program to solve the following Differential Equation by using Euler’s method.
        dy / dx = x3 + y,  y (0) = 1. Compute y (0.02) taking h = 0.01.

*/

#include <bits/stdc++.h>
using namespace std;

double fun(double x, double y)
{
    return (x * x * x) + y;
}
int main()
{
    double x, y, h, point;
    cout << "Enter x0 :";
    cin >> x;
    cout << "Enter y0 :";
    cin >> y;
    cout << "Enter h:";
    cin >> h;
    cout << "Enter x to compute y(x):";
    cin >> point;
    double in = x, ans = y;
    do
    {
        in += h;
        ans = ans + (1.00 * h * fun(in, ans));
    }
    while (fabs(in - point) > 0.00001);

    cout << endl;
    cout << "y(" << point << ") = " << ans << endl;
}

/*

Input:

0 1 0.01 0.02

Output:

y(0.02) = 1.0201

*/

















/// C221060


/*

5. Write a program to solve the following Differential Equation by using Runge – Kutta method.
       dy / dx = x + y, y (0) = 1.  Compute y (0.1) and y (0.2)  taking h = 0.1.

*/

#include<bits/stdc++.h>
using namespace std;

double fun(double x, double y)
{
    return 1.00 * x + y;
}

int main()
{
    double x, y,h,point;
    cout << "Enter x0 : ";
    cin >> x;
    cout << "Enter y0 : ";
    cin >> y;
    cout << "Enter h: ";
    cin >> h;
    cout << "Enter x to compute y(x): ";
    cin >> point;
    double in = x,ans = y;
    do
    {
        double m1 = fun(in,ans);
        double m2 = fun(in  + (h/ 2.00), ans + (1.00 * m1 * h)/2.00 );
        double m3 = fun(in  + (h/ 2.00), ans + (1.00 * m2 * h)/2.00 );
        double m4 = fun(in + h, ans + (1.00 * m3 *h));
        double m = m1 + (2.0 * m2) + (2.0*m3) + m4;
        ans = ans + (m/ 6.00) * h;
        in += h;
    }
    while(fabs(in - point) > 0.00001);

    cout << "\n\n";
    cout << "y(" << point << ") = " << ans << endl;
}

/*

Input:

0 1 0.1 0.1

Output:

y(0.1) = 1.11034

*/

