/// C221060

/*

1. The following values of f (x) are given.


     x              1    2     3       4       5
  y = f(x)          1    8     27      64      125

Write a program to find difference table for the above values.

*/


#include<bits/stdc++.h>
using namespace std;

void Print(vector <int> x)
{
    for(auto a : x){
        cout << a << ' ';
    }
    cout << endl;
}

int main()
{
    int n;
    cout << "n = ";
    cin >> n;
    vector<int> x,y,d[n+5];
    cout << "Value of x : ";
    for(int i = 0; i < n; i++){
        int t;
        cin >> t;
        x.push_back(t);
    }
    cout << "Value of y : ";
    for(int i = 0; i < n; i++){
        int t;
        cin >> t;
        y.push_back(t);
    }

    d[0] = y;
    //Print(d[0]);

    for(int i = 1; i < n; i++){
        for(int j = 1; j < d[i-1].size(); j++){
            d[i].push_back(d[i-1][j] - d[i-1][j-1]);
        }
    }

    for(int i = 0; i < n; i++){
        cout << "D^" << i << " : ";
        Print(d[i]);
    }

}


/*

Input:

5
1 2 3 4 5
1 8 27 64 125

Output:

D^0 : 1 8 27 64 125
D^1 : 7 19 37 61
D^2 : 12 18 24
D^3 : 6 6
D^4 : 0

*/






/// C221060

/*
2. The following values of f (x) are given.

x          1  2  3   4    5
y = f(x)   1  8  27  64   125

Write a program to find the values of y when x = 1.7 by using Newton&#39;s forward interpolation
formula.
*/

#include<bits/stdc++.h>
using namespace std;

void Print(vector <int> x)
{
    for(auto a : x){
        cout << a << ' ';
    }
    cout << endl;
}

int fact(int x)
{
    int ans = 1;
    for(int i=x; i>=2; i--){
        ans *= i;
    }
    return ans;
}

int main()
{
    int n;
    cout << "n = ";
    cin >> n;
    vector<int> x,y,d[n+5];
    cout << "Value of x : ";
    for(int i = 0; i < n; i++){
        int t;
        cin >> t;
        x.push_back(t);
    }
    cout << "Value of y : ";
    for(int i = 0; i < n; i++){
        int t;
        cin >> t;
        y.push_back(t);
    }

    d[0] = y;


    for(int i = 1; i < n; i++){
        for(int j = 1; j < d[i-1].size(); j++){
            d[i].push_back(d[i-1][j] - d[i-1][j-1]);
        }
    }

    double X;
    cout << "Enter the value of X: ";
    cin >> X;
    double h = x[1] - x[0];
    double u = ((X - x[0]) / h) * 1.0;
    double ans = d[0][0] * 1.0;

    for(int i=1; i<=n-1; i++){
        double t = u;
        for(int j=1; j<i; j++){
            t *= (u - double(j));
        }
        t *= (double)(d[i][0]);
        t /= (double)(fact(i));
        ans += double(t);
    }

    cout << "y = " << ans << endl;

    return 0;

}


/*

Input:

5
1 2 3 4 5
1 8 27 64 125
1.7

Output:

y = 4.913


*/



/// C221060

/*

3. The following values of f (x) are given.

    x           1  2  3   4   5
    y = f(x)    1  8  27  64  125

Write a program to find the values of y when x = 4.7 by using Newton's backward interpolation
formula.
*/

#include<bits/stdc++.h>
using namespace std;

void Print(vector <int> x)
{
    for(auto a : x){
        cout << a << ' ';
    }
    cout << endl;
}

int fact(int x)
{
    int ans = 1;
    for(int i=x; i>=2; i--){
        ans *= i;
    }
    return ans;
}

int main()
{
    int n;
    cout << "n = ";
    cin >> n;
    vector<int> x,y,d[n+5];
    cout << "Value of x : ";
    for(int i = 0; i < n; i++){
        int t;
        cin >> t;
        x.push_back(t);
    }
    cout << "Value of y : ";
    for(int i = 0; i < n; i++){
        int t;
        cin >> t;
        y.push_back(t);
    }

    d[0] = y;


    for(int i = 1; i < n; i++){
        for(int j = 1; j < d[i-1].size(); j++){
            d[i].push_back(d[i-1][j] - d[i-1][j-1]);
        }
    }

    double X;
    cout << "Enter the value of X: ";
    cin >> X;
    double h = x[1] - x[0];
    double u = ((X - x[n-1]) / h) * 1.0;
    double ans = d[0][n-1] * 1.0;

    for(int i=1; i<=n-1; i++){
        double t = u;
        for(int j=1; j<i; j++){
            t *= (u + double(j));
        }
        t *= (double)(d[i][n-i-1]);
        t /= (double)(fact(i));
        ans += double(t);
    }

    cout << "y = " << ans << endl;

    return 0;

}


/*

Input:

5
1 2 3 4 5
1 8 27 64 125
4.7

Output:

y = 103.823


*/





/// C221060

/*

4. The following values of f (x) are given.

x           1  2  3   4   5
y = f(x)    1  8  27  64  125

Write a program to find the values of x for which f (x) = 85 by using Lagrangeâ€™s inverse
interpolation formula.

*/

#include<bits/stdc++.h>
using namespace std;


int main()
{
    int n;
    cout << "n = ";
    cin >> n;
    vector<double> x,y;
    cout << "Value of x : ";
    for(int i = 0; i < n; i++){
        int t;
        cin >> t;
        x.push_back(t);
    }
    cout << "Value of y : ";
    for(int i = 0; i < n; i++){
        int t;
        cin >> t;
        y.push_back(t);
    }

    cout << "f(x) = ";
    double Y,ans = 0;
    cin >> Y;
    for(int i=0; i<n; i++){
        double t1=1.0,t2=1.0;
        for(int j=0; j<n; j++){
            if(j == i) continue;
            t1 *= (Y - y[j]);
            t2 *= (y[i] - y[j]);
        }
        ans += ((double)((t1 / t2) * x[i]));
    }

    cout << "X = " << ans << endl;

    return 0;

}


/*

Input:

5
1 2 3 4 5
1 8 27 64 125
85

Output:

X = 5.64691


*/





/// C221060

/*

5. The following values of f (x) are given. Prepare the divided difference table for the following data

    x          1  3   4   6    10
    y = f(x)   0  18  58  190  920

Write a program to find the values of y when x = 2.7 by using Newton's divided difference formula.

*/

#include<bits/stdc++.h>
using namespace std;


int main()
{
    int n;
    cout << "n = ";
    cin >> n;
    vector<double> x,y;
    cout << "Value of x : ";
    for(int i = 0; i < n; i++){
        int t;
        cin >> t;
        x.push_back(t);
    }
    cout << "Value of y : ";
    for(int i = 0; i < n; i++){
        int t;
        cin >> t;
        y.push_back(t);
    }

    vector<double>d[n+5];
    d[0] = y;
    for(int i = 1; i < n; i++){
        for(int j = 1; j < d[i-1].size(); j++){
            double t1 = d[i-1][j] - d[i-1][j -1];
            double t2 = x[j - 1 + i] - x[j - 1];
            double t = t1 / t2;
            d[i].push_back(t);
        }
    }


    cout << "X = ";
    double X,ans = d[0][0];
    cin >> X;
    for(int i = 1; i < n; i++){
        double t = 1.0;
        for(int j = 1; j <= i; j++){
            t *= (X - x[j - 1]);
        }
        t *= d[i][0];
        ans += t;
    }

    cout << "Y = " << ans << endl;

    return 0;

}


/*

Input:

5
1 3 4 6 10
0 18 58 190 920
2.7

Output:

Y = 9.35463


*/


