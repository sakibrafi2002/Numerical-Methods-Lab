/// C221060

/*

1. The following values of f (x) are given.

x           1  2  3   4   5
y = f(x)    1  8  27  64  125

Write a program to find the first derivative and the second derivative of the function tabulated above at
the point x = 1.

*/

#include<bits/stdc++.h>
using namespace std;

void Print(vector <int> x)
{
    for(auto a : x){
        cout << a << ' ';
    }
    cout << endl;
}

int fact(int x)
{
    int ans = 1;
    for(int i=x; i>=2; i--){
        ans *= i;
    }
    return ans;
}

int main()
{
    int n;
    cout << "n = ";
    cin >> n;
    vector<int> x,y,d[n+5];
    cout << "Value of x : ";
    for(int i = 0; i < n; i++){
        int t;
        cin >> t;
        x.push_back(t);
    }
    cout << "Value of y : ";
    for(int i = 0; i < n; i++){
        int t;
        cin >> t;
        y.push_back(t);
    }

    d[0] = y;


    for(int i = 1; i < n; i++){
        for(int j = 1; j < d[i-1].size(); j++){
            d[i].push_back(d[i-1][j] - d[i-1][j-1]);
        }
    }


    double X;
    cout << "Enter the value of X: ";
    cin >> X;
    double h = x[1] - x[0];
    double u = ((X - x[0]) / h) * 1.0;

    double first_derivative = (1.0 / (h * 1.0)) * ( ((d[1][0] * 1.0) ) + ((( (2 * u) - 1 ) * (d[2][0] * 1.0) ) / fact(2) ) + ( ( ( (3.0*u*u) - (6.0 * u) + 2 ) * (d[3][0]*1.0) ) / fact(3) ) + ( ( ( (4*u*u*u) - (18*u*u) + (22*u) - 6) * (d[4][0] *1.0) ) / fact(4) ) );
    double second_derivative = (1.0 / (h*h*1.0)) * ( (d[2][0] * 1.0) + ( ( ( (6.0 * u) - 6 ) * (d[3][0] * 1.0) ) / fact(3) )  + ( ( ( (12.0*u*u) - (36.0 * u) + 22 ) * (d[4][0] * 1.0) ) / fact(4) ) );
    cout << "f'(1)  = " << first_derivative  << endl;
    std::cout << "f''(1) = " << second_derivative << endl;

    return 0;


}


/*

Input:

5
1 2 3 4 5
1 8 27 64 125
1

Output:

f'(1)  = 3
f''(1) = 6


*/









/// C221060

/*

2. The following values of f (x) are given.

x           1  2  3   4   5
y = f(x)    1  8  27  64  125

Write a program to find the first derivative and the second derivative of the function tabulated above at
the point x = 1.5

*/

#include<bits/stdc++.h>
using namespace std;

void Print(vector <int> x)
{
    for(auto a : x){
        cout << a << ' ';
    }
    cout << endl;
}

int fact(int x)
{
    int ans = 1;
    for(int i=x; i>=2; i--){
        ans *= i;
    }
    return ans;
}

int main()
{
    int n;
    cout << "n = ";
    cin >> n;
    vector<int> x,y,d[n+5];
    cout << "Value of x : ";
    for(int i = 0; i < n; i++){
        int t;
        cin >> t;
        x.push_back(t);
    }
    cout << "Value of y : ";
    for(int i = 0; i < n; i++){
        int t;
        cin >> t;
        y.push_back(t);
    }

    d[0] = y;


    for(int i = 1; i < n; i++){
        for(int j = 1; j < d[i-1].size(); j++){
            d[i].push_back(d[i-1][j] - d[i-1][j-1]);
        }
    }


    double X;
    cout << "Enter the value of X: ";
    cin >> X;
    double h = x[1] - x[0];
    double u = ((X - x[0]) / h) * 1.0;

    double first_derivative = (1.0 / (h * 1.0)) * ( ((d[1][0] * 1.0) ) + ((( (2 * u) - 1 ) * (d[2][0] * 1.0) ) / fact(2) ) + ( ( ( (3.0*u*u) - (6.0 * u) + 2 ) * (d[3][0]*1.0) ) / fact(3) ) + ( ( ( (4*u*u*u) - (18*u*u) + (22*u) - 6) * (d[4][0] *1.0) ) / fact(4) ) );
    double second_derivative = (1.0 / (h*h*1.0)) * ( (d[2][0] * 1.0) + ( ( ( (6.0 * u) - 6 ) * (d[3][0] * 1.0) ) / fact(3) )  + ( ( ( (12.0*u*u) - (36.0 * u) + 22 ) * (d[4][0] * 1.0) ) / fact(4) ) );
    cout << "f'(1)  = " << first_derivative  << endl;
    std::cout << "f''(1) = " << second_derivative << endl;

    return 0;


}


/*

Input:

5
1 2 3 4 5
1 8 27 64 125
1.5

Output:

f'(1)  = 6.75
f''(1) = 9


*/











/// C221060

/*

3. Write a program to calculate the approximate area under the curve y = ∫ 5 log 10 x dx
by using trapezoidal rule.

Theory:
I =h/2 [y0 + 2 (y1 + y2 + â€¦â€¦â€¦.  + yn-1) + yn]

*/


#include<bits/stdc++.h>
using namespace std;

double fun(double x) {
    return log10(x);
}

int main(){
    double a, b;
    int n;

    cout << "Lower Limit = ";
    cin >> a;
    cout << "Upper Limit = ";
    cin >> b;
    cout << "Number of intervals = ";
    cin >> n;

    double h = (b - a) / n;
    double sum = fun(a) + fun(b);

    for(int i = 1; i < n; i++){
        double x = a + (i * h);
        sum += (2 * fun(x));
    }

    double result = (h / 2.0) * sum;

    cout << "Approximate area is : "<< result << endl;

    return 0;
}

/*

Input:

1
5
10

Output:

Approximate area is : 1.75307

*/












/// C221060

/*

4. Write a program to calculate the approximate area under the curve y = ∫ /2 e sinx dx by using Simpson’s 1/3
rule

*/

#include<bits/stdc++.h>
using namespace std;

double fun(double x)
{
    return exp(sin(x));
}

int main()
{
    double a, b;
    int n;

    cout << "Enter lower limit (radians): ";
    cin >> a;
    cout << "Enter upper limit (radians): ";
    cin >> b;
    cout << "Enter number of intervals (must be even): ";
    cin >> n;

    double h = (b - a) / n;
    double sum = fun(a) + fun(b);

    for (int i = 1; i < n; i++)
    {
        double x = a + (i * h);
        if (i % 2 == 0)
            sum += 2 * fun(x);
        else
            sum += 4 * fun(x);
    }

    double result = (h / 3.0) * sum;

    cout << "\nApproximate area is: " << result << endl;

    return 0;
}

/*

Input:

0
1.5708
10

Output:

Approximate area is: 3.10439

*/













/// C221060

/*

5. Write a program to calculate the approximate area under the curve:

    y = f (x / (1 + x^2)) dx from a to b

using Simpson's 3/8 Rule.

Formula:

   I = (3h/8) * [(y0 + y_n) + 3(y1+y2+y4+y6+...+y_n-2+y_n-1) ) + 2(y3+y6+... +y_n-3) ]
where:
    h = (b - a) / n
    n must be a multiple of 3

*/

#include<bits/stdc++.h>
using namespace std;

double fun(double x)
{
    return x / (1 + x * x);
}

int main()
{
    double a, b;
    int n;

    cout << "Enter lower limit: ";
    cin >> a;
    cout << "Enter upper limit: ";
    cin >> b;
    cout << "Enter number of intervals (must be multiple of 3): ";
    cin >> n;

    double h = (b - a) / n;
    double sum = fun(a) + fun(b);

    for (int i = 1; i < n; i++)
    {
        double x = a + i * h;
        if (i % 3 == 0)
            sum += 2.0 * fun(x);
        else
            sum += 3.0 * fun(x);
    }

    double result = (3.0 * h / 8.0) * sum;

    cout << "\nApproximate area is: " << result << endl;

    return 0;
}

/*

Input:

0
1
30

Output:

Approximate area is: 0.346574

*/
















/// C221060

/*

6. Write a program to find the determinant of a 3 X 3 matrix.

*/

#include <iostream>
using namespace std;

int main()
{
    double matrix[3][3];

    cout << "Enter the elements of the 3x3 matrix row wise:\n";

    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
        {
            cout << "Element [" << i+1 << "][" << j+1 << "]: ";
            cin >> matrix[i][j];
        }

    double a = matrix[0][0], b = matrix[0][1], c = matrix[0][2];
    double d = matrix[1][0], e = matrix[1][1], f = matrix[1][2];
    double g = matrix[2][0], h = matrix[2][1], i = matrix[2][2];

    double determinant = a*(e*i - f*h) - b*(d*i - f*g) + c*(d*h - e*g);

    cout << "\nDeterminant of the matrix is: " << determinant << endl;

    return 0;
}


/*

Input:

1 2 3
4 5 6
7 8 9

Output:
0

*/













/// C221060

/*

7. Write a program to solve the following system of linear equations by using Matrix inversion method.

    x + y + z = 1
    x + 2y + 3z = 6
    x + 3y + 4z = 6

*/

#include <iostream>
using namespace std;

int main()
{
    double A[3][3], B[3];
    cout << "Matrix A:\n";
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
        {
            cout << "A[" << i+1 << "][" << j+1 << "]: ";
            cin >> A[i][j];
        }


    cout << "Matrix B:\n";
    for (int i = 0; i < 3; i++)
    {
        cout << "B[" << i+1 << "]: ";
        cin >> B[i];
    }

    //determinant
    double det =
        A[0][0]*(A[1][1]*A[2][2] - A[1][2]*A[2][1]) -
        A[0][1]*(A[1][0]*A[2][2] - A[1][2]*A[2][0]) +
        A[0][2]*(A[1][0]*A[2][1] - A[1][1]*A[2][0]);

    if (det == 0)
    {
        cout << "Matrix is singular. No unique solution.\n";
        return 1;
    }

    //inverse of A (adjoint / det)
    double inv[3][3];

    inv[0][0] =  (A[1][1]*A[2][2] - A[1][2]*A[2][1]) / det;
    inv[0][1] = -(A[0][1]*A[2][2] - A[0][2]*A[2][1]) / det;
    inv[0][2] =  (A[0][1]*A[1][2] - A[0][2]*A[1][1]) / det;

    inv[1][0] = -(A[1][0]*A[2][2] - A[1][2]*A[2][0]) / det;
    inv[1][1] =  (A[0][0]*A[2][2] - A[0][2]*A[2][0]) / det;
    inv[1][2] = -(A[0][0]*A[1][2] - A[0][2]*A[1][0]) / det;

    inv[2][0] =  (A[1][0]*A[2][1] - A[1][1]*A[2][0]) / det;
    inv[2][1] = -(A[0][0]*A[2][1] - A[0][1]*A[2][0]) / det;
    inv[2][2] =  (A[0][0]*A[1][1] - A[0][1]*A[1][0]) / det;

    //  A^-1 * B
    double x[3] = {0, 0, 0};
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            x[i] += inv[i][j] * B[j];


    cout << "\nSolution:\n";
    cout << "x = " << x[0] << endl;
    cout << "y = " << x[1] << endl;
    cout << "z = " << x[2] << endl;

    return 0;
}

/*

Input:

1 1 1
1 2 4
1 3 4
1 6 6

Output:

x = -0.666667
y = 0
z = 1.66667

*/











/// C221060

/*

8. Write a program to solve the following system of linear equations by using Cramer’s Rule:

           27x +  6y –  z   =  85
            6x + 15y + 2z   = 72
             x +   y + 54z  = 110



*/

#include <iostream>
using namespace std;

double DET(double A[3][3])
{
    return A[0][0]*(A[1][1]*A[2][2] - A[1][2]*A[2][1]) -
           A[0][1]*(A[1][0]*A[2][2] - A[1][2]*A[2][0]) +
           A[0][2]*(A[1][0]*A[2][1] - A[1][1]*A[2][0]);
}

int main()
{
    double A[3][3], B[3];
    cout << "Matrix A:\n";
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
        {
            cout << "A[" << i+1 << "][" << j+1 << "]: ";
            cin >> A[i][j];
        }


    cout << "Matrix B:\n";
    for (int i = 0; i < 3; i++)
    {
        cout << "B[" << i+1 << "]: ";
        cin >> B[i];
    }

    //determinant
    double det = DET(A);

    if (det == 0)
    {
        cout << "Matrix is singular. No unique solution.\n";
        return 1;
    }

    // Create matrices for Dx, Dy, Dz
    double ax[3][3], ay[3][3], az[3][3];
    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            ax[i][j] = (j == 0) ? B[i] : A[i][j];
            ay[i][j] = (j == 1) ? B[i] : A[i][j];
            az[i][j] = (j == 2) ? B[i] : A[i][j];
        }
    }

    double Dx = DET(ax);
    double Dy = DET(ay);
    double Dz = DET(az);


    cout << "\nSolution:\n";
    cout << "x = " << (Dx / det) << endl;
    cout << "y = " << (Dy / det) << endl;
    cout << "z = " << (Dz / det) << endl;

    return 0;
}

/*

Input:

1 1 1
1 2 4
1 3 4
1 6 6

Output:

x = -0.666667
y = 0
z = 1.66667

*/











/// C221060

/*

9. Write a program to solve the following system of linear equations by using Gaussian Elimination method.
          2x +  y  +   z = 10
           x  + 4y + 9z = 16
          3x + 2y + 3z = 18

*/


#include<bits/stdc++.h>
using namespace std;


int main()
{

    double A[5][6];

    for( int i = 1 ; i <= 3; i++)
    {
        for( int j = 1 ; j <= 3; j++)
        {
            cout << "a" << i << j << " : ";
            cin >> A[i][j];
        }
        cout << "Enter b" << i << ": ";
        cin >> A[i][4];
    }

    double m1 = ( - ((A[2][1] * 1.00)  / A[1][1]));
    double m2= ( - ((A[3][1] * 1.00)  / A[1][1]));
    for( int i = 1; i <= 4; i++)
    {
        double t1 = A[1][i] * m1;
        double t2 = A[1][i] * m2;
        A[2][i] += t1;
        A[3][i] += t2;
    }

    double m3 = ( - ((A[3][2] * 1.00) / A[2][2]));
    for( int i = 1; i <= 4; i++)
    {
        double t = A[2][i] * m3;
        A[3][i] += t;
    }

    vector<double>ans(4);
    ans[3] = (A[3][4]*1.00) / A[3][3];
    ans[2] = (A[2][4] - (A[2][3] * ans[3])) / (1.00 * A[2][2]);
    ans[1] = (A[1][4] - (A[1][3] * ans[3]) - (A[1][2] * ans[2])) / (1.00 * A[1][1]);

    cout << "\n\n";
    cout << "x1 = " << ans[1] << endl
         << "x2 = " << ans[2] << endl
         << "x3 = " << ans[3] << endl;


    return 0;
}


/*

Input:

2 1 1 10
1 4 9 16
3 2 3 18

Output:

x1 = 7
x2 = -9
x3 = 5

*/
